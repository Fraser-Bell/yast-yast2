/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:
 *	HwStatus.ycp
 *
 * Module:
 *	HwStatus
 *
 * Authors:
 *	Klaus Kaempf (kkaempf@suse.de)
 *
 * Summary:
 *	All hardware status relevant functions are here
 * $Id$
 */
{
    module "HwStatus";

    // status map for devices, key is "unique id", value is symbol (`yes, `no)

    map<string, symbol> statusmap = $[];

    /**
     * Set
     * set status for a hardware device
     * @param id	string, unique-id for device
     * @param stat	symbol, status of device (`yes or `no)
     *
     */
    global define void Set (string id, symbol stat)
    ``{
	statusmap[id] = stat;
    }

    /**
     * Get()
     * get status for device
     * @param id	string, unique-id for device
     * @returns symbol	status of device, (`yes or `no)
     *			returns `unknown if status wasn't set before
     */
    global define symbol Get (string id)
    ``{
	return statusmap[id]:`unknown;
    }

    /**
     * Save()
     * save stati for all devices
     */
    global define void Save ()
    ``{
	foreach (string id, symbol stat, statusmap,
	``{
	    y2milestone ("Setting status of %1 as %2", id, stat);
	    SCR::Write(.probe.status.configured, id, stat);
	});
    }

    /**
     * Update()
     * set stati for all devices
     */
    global define void Update ()
    ``{
	// probe all pci and isapnp devices once
	// so they have a defined status after update
	SCR::Read (.probe.pci);
	SCR::Read (.probe.isapnp);

	// build relation between old keys and new UDIs (bug #104676)
	string command = "hwinfo --pci --block --mouse --save-config=all";
	y2milestone ("Running %1", command);
	map cmdret = (map)SCR::Execute (.target.bash_output, command);
	integer exit = cmdret["exit"]:-1;
	y2milestone ("Command retval: %1", cmdret["exit"]:-1);
	if (exit != 0)
	    y2error ("Command output: %1", cmdret);
	else
	    y2debug ("Command output: %1", cmdret);
    }

}
