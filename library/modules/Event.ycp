/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	Event.ycp
 * Package:	yast2
 * Summary:	UI Event Helpers
 * Authors:	Arvin Schnell <aschnell@suse.de>
 */
{
    module "Event";


    /**
     * Returns id of widget causing the event.
     */
    global symbol GetWidgetId(map event)
    {
	return event["ID"]:(symbol)(nil);
    }


    /**
     * Checks that the EventType is WidgetEvent and the EventReason is
     * Activated.
     *
     * Returns id or nil.
     */
    global symbol IsWidgetActivated(map event)
    {
	if (event["EventType"]:"Unknown" != "WidgetEvent")
	    return nil;

	if (event["EventReason"]:"Unknown" != "Activated")
	    return nil;

	return event["ID"]:(symbol)(nil);
    }


    /**
     * Checks that the EventType is WidgetEvent and the EventReason is
     * SelectionChanged.
     *
     * Returns id or nil.
     */
    global symbol IsWidgetSelectionChanged(map event)
    {
	if (event["EventType"]:"Unknown" != "WidgetEvent")
	    return nil;

	if (event["EventReason"]:"Unknown" != "SelectionChanged")
	    return nil;

	return event["ID"]:(symbol)(nil);
    }


    /**
     * Checks that the EventType is WidgetEvent and the EventReason is
     * ValueChanged.
     *
     * Returns id or nil.
     */
    global symbol IsWidgetValueChanged(map event)
    {
	if (event["EventType"]:"Unknown" != "WidgetEvent")
	    return nil;

	if (event["EventReason"]:"Unknown" != "ValueChanged")
	    return nil;

	return event["ID"]:(symbol)(nil);
    }


    /**
     * Checks that the EventType is WidgetEvent and the EventReason is
     * Activated or SelectionChanged.
     *
     * Returns id or nil.
     */
    global symbol IsWidgetActivatedOrSelectionChanged(map event)
    {
	if (event["EventType"]:"Unknown" != "WidgetEvent")
	    return nil;

	if ((event["EventReason"]:"Unknown" != "Activated") &&
	    (event["EventReason"]:"Unknown" != "SelectionChanged"))
	    return nil;

	return event["ID"]:(symbol)(nil);
    }


    /**
     * Checks that the EventType is WidgetEvent and the EventReason is
     * ContextMenuActivated.
     *
     * Returns id or nil.
     */
    global symbol IsWidgetContextMenuActivated(map event)
    {
	if (event["EventType"]:"Unknown" != "WidgetEvent")
	    return nil;

	if (event["EventReason"]:"Unknown" != "ContextMenuActivated")
	    return nil;

	return event["ID"]:(symbol)(nil);
    }


    /**
     * Checks that the EventType is MenuEvent.
     *
     * return id or nil.
     */
    global symbol IsMenu(map event)
    {
	if (event["EventType"]:"Unknown" != "MenuEvent")
	    return nil;

	return event["ID"]:(symbol)(nil);
    }


    /**
     * Checks that the EventType is TimeoutEvent.
     *
     * return id or nil.
     */
    global symbol IsTimeout(map event)
    {
	if (event["EventType"]:"Unknown" != "TimeoutEvent")
	    return nil;

	return event["ID"]:(symbol)(nil);
    }


    /**
     * Checks that the EventType is CancelEvent.
     *
     * return id or nil.
     */
    global symbol IsCancel(map event)
    {
	if (event["EventType"]:"Unknown" != "CancelEvent")
	    return nil;

	return event["ID"]:(symbol)(nil);
    }
}
