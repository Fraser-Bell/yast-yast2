/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:
 *  t1.ycp
 *
 * Module:
 *  Common Widget Manipulation
 *
 * Summary:
 *  Common Widget Manipulation tests
 *
 * Authors:
 *  Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 * testedfiles: CWM.ycp testfunc.yh Testsuite.ycp
 */

{
#    global define void UI::OpenDialog (term t) ``{};
#    global define void UI::CloseDialog () ``{};
#    global define symbol UI::UserInput()``{return `_tp_cancel ;}

    include "testsuite.ycp";
    import "CWM";
    import "TablePopup";
    import "Report";

    // disable use of UI
    Report::display_errors = false;
    Report::log_errors = true;

    include "./tests/testfunc.yh";
    import "Mode";

    Mode::SetTest ("testsuite");

    define map<string,any> MyCreateTable () ``{
        map<string,any> ret = TablePopup::CreateTableDescr ($[],
	    $[
	    "init" : TablePopup::TableInitWrapper,
	    "handle" : TablePopup::TableHandleWrapper,
	    "ids" : getIdList,
	    "id2key" : id2key,
	    "options" : popups,
	    "fallback" : $[
		"init" : fallback_init,
		"store" : fallback_store,
		"summary" : fallback_summary,
	    ],
	]);
        return ret;
    }


    map functions = $[
	"init" : generic_init,
	"store" : generic_save,
    ];

    any ret = nil;

    DUMP ("=========================================");
    DUMP ("============   Table/Popup   ============");
    DUMP ("=========================================");

    widgets = $[ "table" : MyCreateTable (), ];
    list<map<string, any> > widget_data = CWM::CreateWidgets ([ "table" ], widgets);
    DUMP (sformat ("W: %1", widget_data[0]:nil));

    DUMP ("=========================================");
    DUMP ("Init");
    CWM::initWidgets (widget_data);

    DUMP ("=========================================");
    DUMP ("Handle");

    ret = CWM::handleWidgets (widget_data, $[ "ID" : `_tp_edit]);
    DUMP (sformat ("Returned %1", ret));
    widget_data[0, "options", "a", "table", "handle"] = a_handle;
    ret = CWM::handleWidgets (widget_data, $[ "ID" : `_tp_edit]);
    DUMP (sformat ("Returned %1", ret));

    DUMP ("=========================================");
    DUMP ("Popups");
    DUMP ("======");

    DUMP ("========================================");
    DUMP ("Merge functions");
    map<string,any> option = TablePopup::key2descr (widget_data[0]:$[], "a");
    DUMP (sformat ("Before: %1", option));
    option = TablePopup::updateOptionMap (option, widget_data[0, "fallback"]:$[]);
    DUMP (sformat ("After: %1", option));

    DUMP ("=========================================");
    DUMP ("Prepare widget");
    map<string,any> popup = option["popup"]:$[];
    popup = (map<string,any>)add (popup, "____", "____"); // needed just to create a real copy
    popup = CWM::prepareWidget (popup);
    popup = (map<string,any>)remove (popup, "____");
    DUMP (sformat ("Prepared: %1", popup));

    DUMP ("=========================================");
    DUMP ("Run popup");

    TablePopup::singleOptionEditPopup (option);

}
